{"version":3,"file":"static/webpack/static/development/pages/accounts/savings/[accountNo].js.604d572c31bb1fc430ef.hot-update.js","sources":["webpack:///./components/layouts/Sidebar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSelector } from 'react-redux'\nimport { useRouter } from 'next/router'\nimport { animated, useTransition } from 'react-spring'\nimport { Flex, Box } from '@domus/domus-ui'\nimport DashboardSidebar from '~/components/dashboard/DashboardSidebar'\nimport AccountsSidebar from '~/components/accounts/AccountsSidebar'\nimport routes from '~/config/routesConfig'\nimport utilities from '~/utilities'\n\nconst AnimatedBox = animated(Box)\n\nconst Sidebar = ({ isFirstTime, handlePageTransition }) => {\n  const [pathName, setPath] = useState('')\n  const { isRouteChanging, isSamePath } = useSelector(state => state.ui)\n  const router = useRouter()\n\n  const handleRouteChange = url => setPath(url)\n\n  const handleRouteLink = (e, href) => {\n    e.preventDefault()\n    if (href !== pathName) handlePageTransition(e, href)\n  }\n\n  const animateInOutSidebar = useTransition(!isRouteChanging, null, {\n    from: {\n      opacity: 0,\n      transform: 'translateX(-5rem)',\n    },\n    enter: {\n      opacity: 1,\n      transform: 'translateX(0)',\n    },\n    leave: {\n      opacity: 0,\n      transform: 'translateX(-5rem)',\n    },\n  })\n\n  useEffect(() => {\n    handleRouteChange(router.asPath)\n\n    routes.accountsSidebar.forEach(route => router.prefetch(route.href))\n\n    router.events.on('routeChangeStart', handleRouteChange)\n\n    return function clear() {\n      router.events.off('routeChangeStart', handleRouteChange)\n    }\n  }, [])\n\n  return (\n    <>\n      <Flex\n        as=\"aside\"\n        className=\"sidebar\"\n        bg=\"based\"\n        width={[1, 1 / 4]}\n        flexDirection=\"column\"\n        minHeight=\"95vh\">\n        {utilities.ifThenElse(\n          pathName.includes('/accounts'),\n          utilities.ifThenElse(\n            isSamePath,\n            <AccountsSidebar\n              pathName={pathName}\n              handleRouteLink={handleRouteLink}\n            />,\n            animateInOutSidebar.map(\n              ({ item, key, props: animateProps }) =>\n                item && (\n                  <AnimatedBox key={key} style={animateProps}>\n                    <AccountsSidebar\n                      pathName={pathName}\n                      handleRouteLink={handleRouteLink}\n                    />\n                  </AnimatedBox>\n                )\n            )\n          )\n        )}\n        {pathName.includes('/dashboard') &&\n          animateInOutSidebar.map(\n            ({ item, key, props: animateProps }) =>\n              item && (\n                <AnimatedBox key={key} style={animateProps}>\n                  <DashboardSidebar isFirstTime={isFirstTime} />\n                </AnimatedBox>\n              )\n          )}\n      </Flex>\n    </>\n  )\n}\n\nSidebar.propTypes = {\n  isFirstTime: PropTypes.bool,\n  handlePageTransition: PropTypes.func,\n}\n\nSidebar.defaultProps = {\n  isFirstTime: false,\n  handlePageTransition: () => {},\n}\n\nexport default Sidebar\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AAFA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AATA;AAeA;AACA;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAcA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAUA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;;;;A","sourceRoot":""}